import { __values } from 'tslib';
import { Inject, Injectable, Component, EventEmitter, forwardRef, Input, Output, ViewChild, Directive, HostListener, NgModule, defineInjectable, inject } from '@angular/core';
import { Validators, NG_VALUE_ACCESSOR, FormBuilder, FormsModule, ReactiveFormsModule } from '@angular/forms';
import { CommonModule } from '@angular/common';
import { MatButtonModule } from '@angular/material/button';
import { MatFormFieldModule } from '@angular/material/form-field';
import { MatIconModule } from '@angular/material/icon';
import { MatInputModule } from '@angular/material/input';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @type {?} */
var defaultSettings = {
    classAnimation: 'bounce-in',
    fileAccept: '*',
    fileLimit: 1,
    iconAdd: 'add',
    iconDelete: 'delete',
    iconFile: 'insert_drive_file',
    iconLink: 'link',
    linkEnabled: false,
    placeholderLink: 'Link',
    sizeLimit: null
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/** @enum {number} */
var InputFileRejectedReason = {
    badFile: 0,
    limitReached: 1,
    sizeReached: 2,
};
InputFileRejectedReason[InputFileRejectedReason.badFile] = 'badFile';
InputFileRejectedReason[InputFileRejectedReason.limitReached] = 'limitReached';
InputFileRejectedReason[InputFileRejectedReason.sizeReached] = 'sizeReached';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var InputFileService = /** @class */ (function () {
    function InputFileService(_config) {
        this._config = _config;
    }
    Object.defineProperty(InputFileService.prototype, "config", {
        get: /**
         * @return {?}
         */
        function () {
            return this._config;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Whether the limit is not reached.
     * @param files
     */
    /**
     * Whether the limit is not reached.
     * @param {?} files
     * @param {?} fileLimit
     * @return {?}
     */
    InputFileService.prototype.limitGuard = /**
     * Whether the limit is not reached.
     * @param {?} files
     * @param {?} fileLimit
     * @return {?}
     */
    function (files, fileLimit) {
        return files.length < fileLimit;
    };
    /**
     * Whether the file size is not bigger than the limit.
     * @param file
     * @param sizeLimit
     */
    /**
     * Whether the file size is not bigger than the limit.
     * @param {?} file
     * @param {?} sizeLimit
     * @return {?}
     */
    InputFileService.prototype.sizeGuard = /**
     * Whether the file size is not bigger than the limit.
     * @param {?} file
     * @param {?} sizeLimit
     * @return {?}
     */
    function (file, sizeLimit) {
        return !sizeLimit || file.size < sizeLimit * 1024 * 1024; // TODO : improve
    };
    /**
     * Whether the type of the file is enabled.
     * @param file
     * @param fileAccept
     */
    /**
     * Whether the type of the file is enabled.
     * @param {?} file
     * @param {?} fileAccept
     * @return {?}
     */
    InputFileService.prototype.typeGuard = /**
     * Whether the type of the file is enabled.
     * @param {?} file
     * @param {?} fileAccept
     * @return {?}
     */
    function (file, fileAccept) {
        var e_1, _a;
        /** @type {?} */
        var enabled = fileAccept == null;
        if (fileAccept) {
            /** @type {?} */
            var accept = fileAccept.replace('*', '');
            /** @type {?} */
            var types = accept.split(',');
            try {
                for (var types_1 = __values(types), types_1_1 = types_1.next(); !types_1_1.done; types_1_1 = types_1.next()) {
                    var type = types_1_1.value;
                    if (file.type.startsWith(type) || (type.charAt(0) === '.' && file.name != null && file.name.endsWith(type))) {
                        enabled = true;
                        break;
                    }
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (types_1_1 && !types_1_1.done && (_a = types_1.return)) _a.call(types_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        return enabled;
    };
    InputFileService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    /** @nocollapse */
    InputFileService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: ['config',] }] }
    ]; };
    /** @nocollapse */ InputFileService.ngInjectableDef = defineInjectable({ factory: function InputFileService_Factory() { return new InputFileService(inject("config")); }, token: InputFileService, providedIn: "root" });
    return InputFileService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
/**
 * @param {?} control
 * @return {?}
 */
function urlValidator(control) {
    if (Validators.required(control) != null) {
        return null;
    }
    /** @type {?} */
    var v = control.value;
    /* tslint:disable */
    return /^(?:(?:(?:https?|ftp):)?\/\/)(?:\S+(?::\S*)?@)?(?:(?!(?:10|127)(?:\.\d{1,3}){3})(?!(?:169\.254|192\.168)(?:\.\d{1,3}){2})(?!172\.(?:1[6-9]|2\d|3[0-1])(?:\.\d{1,3}){2})(?:[1-9]\d?|1\d\d|2[01]\d|22[0-3])(?:\.(?:1?\d{1,2}|2[0-4]\d|25[0-5])){2}(?:\.(?:[1-9]\d?|1\d\d|2[0-4]\d|25[0-4]))|(?:(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)(?:\.(?:[a-z\u00a1-\uffff0-9]-*)*[a-z\u00a1-\uffff0-9]+)*(?:\.(?:[a-z\u00a1-\uffff]{2,})).?)(?::\d{2,5})?(?:[/?#]\S*)?$/i.test(v) ? null : { 'url': true };
    /* tslint:enable */
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var InputFileComponent = /** @class */ (function () {
    function InputFileComponent(formBuilder, inputFileService) {
        this.formBuilder = formBuilder;
        this.inputFileService = inputFileService;
        this.acceptedFile = new EventEmitter();
        this.deletedFile = new EventEmitter();
        this.rejectedFile = new EventEmitter();
        this.files = new Array();
        this.id = "ngx-input-file-" + InputFileComponent.nextId++;
        this.onChange = function (files) { };
        this.onTouched = function () { };
    }
    Object.defineProperty(InputFileComponent.prototype, "classAnimation", {
        get: /**
         * @return {?}
         */
        function () {
            return this._classAnimation || this.inputFileService.config.classAnimation || defaultSettings.classAnimation;
        },
        set: /**
         * @param {?} classAnimation
         * @return {?}
         */
        function (classAnimation) {
            this._classAnimation = classAnimation;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputFileComponent.prototype, "fileAccept", {
        get: /**
         * @return {?}
         */
        function () {
            return this._fileAccept || this.inputFileService.config.fileAccept || defaultSettings.fileAccept;
        },
        set: /**
         * @param {?} fileAccept
         * @return {?}
         */
        function (fileAccept) {
            this._fileAccept = fileAccept;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputFileComponent.prototype, "fileLimit", {
        get: /**
         * @return {?}
         */
        function () {
            return this._fileLimit || this.inputFileService.config.fileLimit || defaultSettings.fileLimit;
        },
        set: /**
         * @param {?} fileLimit
         * @return {?}
         */
        function (fileLimit) {
            this._fileLimit = fileLimit;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputFileComponent.prototype, "iconAdd", {
        get: /**
         * @return {?}
         */
        function () {
            return this._iconAdd || this.inputFileService.config.iconAdd || defaultSettings.iconAdd;
        },
        set: /**
         * @param {?} iconAdd
         * @return {?}
         */
        function (iconAdd) {
            this._iconAdd = iconAdd;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputFileComponent.prototype, "iconDelete", {
        get: /**
         * @return {?}
         */
        function () {
            return this._iconDelete || this.inputFileService.config.iconDelete || defaultSettings.iconDelete;
        },
        set: /**
         * @param {?} iconDelete
         * @return {?}
         */
        function (iconDelete) {
            this._iconDelete = iconDelete;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputFileComponent.prototype, "iconFile", {
        get: /**
         * @return {?}
         */
        function () {
            return this._iconFile || this.inputFileService.config.iconFile || defaultSettings.iconFile;
        },
        set: /**
         * @param {?} iconFile
         * @return {?}
         */
        function (iconFile) {
            this._iconFile = iconFile;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputFileComponent.prototype, "iconLink", {
        get: /**
         * @return {?}
         */
        function () {
            return this._iconLink || this.inputFileService.config.iconLink || defaultSettings.iconLink;
        },
        set: /**
         * @param {?} iconLink
         * @return {?}
         */
        function (iconLink) {
            this._iconLink = iconLink;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputFileComponent.prototype, "linkEnabled", {
        get: /**
         * @return {?}
         */
        function () {
            return this._linkEnabled || this.inputFileService.config.linkEnabled || defaultSettings.linkEnabled;
        },
        set: /**
         * @param {?} linkEnabled
         * @return {?}
         */
        function (linkEnabled) {
            this._linkEnabled = linkEnabled;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputFileComponent.prototype, "placeholderLink", {
        get: /**
         * @return {?}
         */
        function () {
            return this._placeholderLink || this.inputFileService.config.placeholderLink || defaultSettings.placeholderLink;
        },
        set: /**
         * @param {?} placeholderLink
         * @return {?}
         */
        function (placeholderLink) {
            this._placeholderLink = placeholderLink;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputFileComponent.prototype, "sizeLimit", {
        get: /**
         * @return {?}
         */
        function () {
            return this._sizeLimit || this.inputFileService.config.sizeLimit || defaultSettings.sizeLimit;
        },
        set: /**
         * @param {?} sizeLimit
         * @return {?}
         */
        function (sizeLimit) {
            this._sizeLimit = sizeLimit;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputFileComponent.prototype, "canAddFile", {
        get: /**
         * @return {?}
         */
        function () {
            return this.files && this.files.length < this.fileLimit;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Angular lifecyle OnInit implementation.
     */
    /**
     * Angular lifecyle OnInit implementation.
     * @return {?}
     */
    InputFileComponent.prototype.ngOnInit = /**
     * Angular lifecyle OnInit implementation.
     * @return {?}
     */
    function () {
        this.setForm();
    };
    /**
     * On delete a file event handler.
     * @param index
     */
    /**
     * On delete a file event handler.
     * @param {?} index
     * @return {?}
     */
    InputFileComponent.prototype.onDeleteFile = /**
     * On delete a file event handler.
     * @param {?} index
     * @return {?}
     */
    function (index) {
        if (!this.disabled) {
            /** @type {?} */
            var files = this.files.slice();
            this.deletedFile.emit(files[index]);
            files.splice(index, 1);
            this.writeValue(files);
        }
    };
    /**
     * On drag over event handler.
     * Adds a ripple effect on the button.
     */
    /**
     * On drag over event handler.
     * Adds a ripple effect on the button.
     * @param {?} button
     * @return {?}
     */
    InputFileComponent.prototype.onDragOver = /**
     * On drag over event handler.
     * Adds a ripple effect on the button.
     * @param {?} button
     * @return {?}
     */
    function (button) {
        button.ripple.launch({ centered: true, persistent: true });
    };
    /**
     * On drag leave event handler.
     * Fades the ripple effect of the button.
     */
    /**
     * On drag leave event handler.
     * Fades the ripple effect of the button.
     * @param {?} button
     * @return {?}
     */
    InputFileComponent.prototype.onDragLeave = /**
     * On drag leave event handler.
     * Fades the ripple effect of the button.
     * @param {?} button
     * @return {?}
     */
    function (button) {
        button.ripple.fadeOutAll();
    };
    /**
     * On adds a link.
     */
    /**
     * On adds a link.
     * @return {?}
     */
    InputFileComponent.prototype.onLink = /**
     * On adds a link.
     * @return {?}
     */
    function () {
        this.addLink = !this.addLink;
    };
    /**
     * On replace one file event handler.
     * Writes the value.
     * @param fileList
     * @param index
     * @param fileInput
     */
    /**
     * On replace one file event handler.
     * Writes the value.
     * @param {?} fileList
     * @param {?} index
     * @param {?} button
     * @param {?=} fileInput
     * @return {?}
     */
    InputFileComponent.prototype.onReplaceFile = /**
     * On replace one file event handler.
     * Writes the value.
     * @param {?} fileList
     * @param {?} index
     * @param {?} button
     * @param {?=} fileInput
     * @return {?}
     */
    function (fileList, index, button, fileInput) {
        if (!this.disabled) {
            // Copies the array without reference.
            /** @type {?} */
            var files = this.files.slice();
            // Assumes that a single file can be replaced by a single file.
            /** @type {?} */
            var inputFile = { file: fileList.item(0) };
            button.ripple.fadeOutAll();
            if (this.fileGuard(files, inputFile, true)) {
                files[index] = inputFile;
                this.acceptedFile.emit(inputFile);
            }
            this.writeValue(files);
            if (fileInput) {
                fileInput.value = '';
            }
        }
    };
    /**
     * On select one or more files event handler.
     * Writes the value.
     * @param fileList
     */
    /**
     * On select one or more files event handler.
     * Writes the value.
     * @param {?} fileList
     * @param {?} button
     * @return {?}
     */
    InputFileComponent.prototype.onSelectFile = /**
     * On select one or more files event handler.
     * Writes the value.
     * @param {?} fileList
     * @param {?} button
     * @return {?}
     */
    function (fileList, button) {
        var _this = this;
        if (!this.disabled) {
            button.ripple.fadeOutAll();
            // Copies the array without reference.
            /** @type {?} */
            var files_1 = this.files.slice();
            Array.from(fileList).forEach(function (file) {
                /** @type {?} */
                var inputFile = { file: file };
                if (_this.fileGuard(files_1, inputFile)) {
                    files_1.push(inputFile);
                    _this.acceptedFile.emit(inputFile);
                }
            });
            this.writeValue(files_1);
            this.fileInput.nativeElement.value = '';
        }
    };
    /**
     * On submit the link form event handler.
     */
    /**
     * On submit the link form event handler.
     * @return {?}
     */
    InputFileComponent.prototype.onSubmitLink = /**
     * On submit the link form event handler.
     * @return {?}
     */
    function () {
        if (!this.disabled && this.form.valid) {
            /** @type {?} */
            var files = this.files.slice();
            /** @type {?} */
            var inputFile = { link: this.form.value.link, preview: this.form.value.link };
            files.push(inputFile);
            this.acceptedFile.emit(inputFile);
            this.onLink();
            this.form.reset();
            this.writeValue(files);
        }
    };
    /**
     * Implementation of ControlValueAccessor.
     * @param fn
     */
    /**
     * Implementation of ControlValueAccessor.
     * @param {?} fn
     * @return {?}
     */
    InputFileComponent.prototype.registerOnChange = /**
     * Implementation of ControlValueAccessor.
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onChange = fn;
    };
    /**
     * Implementation of ControlValueAccessor.
     * @param fn
     */
    /**
     * Implementation of ControlValueAccessor.
     * @param {?} fn
     * @return {?}
     */
    InputFileComponent.prototype.registerOnTouched = /**
     * Implementation of ControlValueAccessor.
     * @param {?} fn
     * @return {?}
     */
    function (fn) {
        this.onTouched = fn;
    };
    /**
     * Implementation of ControlValueAccessor.
     * @param isDisabled
     */
    /**
     * Implementation of ControlValueAccessor.
     * @param {?} isDisabled
     * @return {?}
     */
    InputFileComponent.prototype.setDisabledState = /**
     * Implementation of ControlValueAccessor.
     * @param {?} isDisabled
     * @return {?}
     */
    function (isDisabled) {
        this.disabled = isDisabled;
    };
    /**
     * Implementation of ControlValueAccessor.
     * @param files
     */
    /**
     * Implementation of ControlValueAccessor.
     * @param {?} files
     * @return {?}
     */
    InputFileComponent.prototype.writeValue = /**
     * Implementation of ControlValueAccessor.
     * @param {?} files
     * @return {?}
     */
    function (files) {
        if (!files) {
            files = new Array();
        }
        this.files = files;
        this.setFilePreview();
        this.onChange(this.files);
    };
    /**
     * Whether the file can be added to the model.
     * @param files
     * @param file,
     * @param bypassLimit
     */
    /**
     * Whether the file can be added to the model.
     * @param {?} files
     * @param {?} file
     * @param {?=} bypassLimit
     * @return {?}
     */
    InputFileComponent.prototype.fileGuard = /**
     * Whether the file can be added to the model.
     * @param {?} files
     * @param {?} file
     * @param {?=} bypassLimit
     * @return {?}
     */
    function (files, file, bypassLimit) {
        if (!bypassLimit && !this.inputFileService.limitGuard(files, this.fileLimit)) {
            this.rejectedFile.emit({ reason: InputFileRejectedReason.limitReached, file: file });
            return false;
        }
        if (!this.inputFileService.sizeGuard(file.file, this.sizeLimit)) {
            this.rejectedFile.emit({ reason: InputFileRejectedReason.sizeReached, file: file });
            return false;
        }
        if (!this.inputFileService.typeGuard(file.file, this.fileAccept)) {
            this.rejectedFile.emit({ reason: InputFileRejectedReason.badFile, file: file });
            return false;
        }
        return true;
    };
    /**
     * Sets the file preview with FileReader.
     */
    /**
     * Sets the file preview with FileReader.
     * @return {?}
     */
    InputFileComponent.prototype.setFilePreview = /**
     * Sets the file preview with FileReader.
     * @return {?}
     */
    function () {
        var _this = this;
        var _loop_1 = function (index) {
            if (this_1.files[index].file != null && this_1.inputFileService.typeGuard(this_1.files[index].file, 'image/*')) {
                /** @type {?} */
                var fr_1 = new FileReader();
                fr_1.onload = function () {
                    _this.files[index].preview = fr_1.result;
                };
                fr_1.readAsDataURL(this_1.files[index].file);
            }
        };
        var this_1 = this;
        for (var index in this.files) {
            _loop_1(index);
        }
    };
    /**
     * Sets the reactive form to insert a link.
     */
    /**
     * Sets the reactive form to insert a link.
     * @return {?}
     */
    InputFileComponent.prototype.setForm = /**
     * Sets the reactive form to insert a link.
     * @return {?}
     */
    function () {
        this.form = this.formBuilder.group({
            link: ['', [Validators.required, urlValidator]]
        });
    };
    InputFileComponent.nextId = 0;
    InputFileComponent.decorators = [
        { type: Component, args: [{
                    selector: 'input-file',
                    template: "<div class=\"input-file-container\">\n    <label class=\"mat-orphan-label\" [for]=\"id\" [class.active]=\"files?.length\" [innerHtml]=\"placeholder\" *ngIf=\"placeholder\"></label>\n    <div class=\"files-container\">\n\n        <ng-container *ngFor=\"let file of files; let i = index\">\n            <div class=\"file-container\" [ngClass]=\"classAnimation\">\n                <ng-container *ngTemplateOutlet=\"fileTemplate; context: { $implicit: file, index: i }\"></ng-container>\n            </div>\n        </ng-container>\n\n        <ng-container *ngIf=\"canAddFile\">\n            <div class=\"file-container\">\n                <ng-container *ngIf=\"!addLink; else linkTemplate\">\n                    <ng-container *ngTemplateOutlet=\"addTemplate\"></ng-container>\n                </ng-container>\n            </div>\n        </ng-container>\n    </div>\n\n</div>\n\n<ng-template #addTemplate>\n    <button mat-button inputFileDropZone class=\"file-button\" type=\"button\" (click)=\"fileInput.click()\" (itemDrop)=\"onSelectFile($event, selectButton)\"\n        (itemDragOver)=\"onDragOver(selectButton)\" (itemDragLeave)=\"onDragLeave(selectButton)\" [disabled]=\"disabled\" #selectButton>\n        <mat-icon class=\"input-icon\">{{ iconAdd }}</mat-icon>\n    </button>\n    <button mat-button class=\"secondary-button\" type=\"button\" [disabled]=\"disabled\" (click)=\"onLink()\" *ngIf=\"linkEnabled\">\n        <mat-icon>{{ iconLink }}</mat-icon>\n    </button>\n    <input [id]=\"id\" [accept]=\"fileAccept\" hidden type=\"file\" [attr.multiple]=\"fileLimit > 1 ? true : null\" #fileInput (change)=\"onSelectFile($event.target.files, selectButton)\">\n</ng-template>\n\n<ng-template #fileTemplate let-file let-index=\"index\">\n    <button mat-button inputFileDropZone class=\"replace-button\" type=\"button\" (click)=\"fileReplace.click()\" (itemDrop)=\"onReplaceFile($event, index, replaceButton)\"\n        [disabled]=\"disabled\" (itemDragOver)=\"onDragOver(replaceButton)\" (itemDragLeave)=\"onDragLeave(replaceButton)\" #replaceButton>\n        <img class=\"image-preview\" [src]=\"file.preview\" *ngIf=\"file.preview; else noPreview\">\n        <ng-template #noPreview>\n            <mat-icon class=\"input-icon\">{{ iconFile }}</mat-icon>\n            <div class=\"file-name text-truncate\" [innerHtml]=\"file.file.name\" *ngIf=\"file.file\"></div>\n        </ng-template>\n    </button>\n    <button mat-button class=\"secondary-button\" type=\"button\" (click)=\"onDeleteFile(index)\" [disabled]=\"disabled\">\n        <mat-icon>{{ iconDelete }}</mat-icon>\n    </button>\n    <input [accept]=\"fileAccept\" hidden type=\"file\" #fileReplace (change)=\"onReplaceFile($event.target.files, index, replaceButton, fileReplace)\">\n</ng-template>\n\n<ng-template #linkTemplate>\n    <form class=\"form-link slide-in-up\" [formGroup]=\"form\" (ngSubmit)=\"onSubmitLink()\" novalidate>\n        <mat-form-field class=\"input-link\">\n            <input matInput formControlName=\"link\" [placeholder]=\"placeholderLink\">\n        </mat-form-field>\n        <div class=\"form-link-button\">\n            <button mat-button type=\"button\" (click)=\"onLink()\" [disabled]=\"disabled\">\n                <mat-icon>arrow_back</mat-icon>\n            </button>\n            <button mat-button type=\"submit\" [disabled]=\"disabled\">\n                <mat-icon>check</mat-icon>\n            </button>\n        </div>\n    </form>\n</ng-template>",
                    providers: [
                        {
                            provide: NG_VALUE_ACCESSOR,
                            useExisting: forwardRef(function () { return InputFileComponent; }),
                            multi: true
                        }
                    ],
                    styles: [".input-file-container{position:relative}.input-file-container .files-container{display:flex;flex-direction:row;flex-wrap:wrap;padding-top:1.25rem}.input-file-container .file-button,.input-file-container .file-container{align-items:center;display:flex;height:10rem;justify-content:center;width:10rem}.input-file-container .secondary-button{width:10rem}.input-file-container .file-button{flex:1}.input-file-container .file-container{flex-direction:column;margin-right:1rem}.input-file-container .replace-button{flex:1;width:10rem}.input-file-container .mat-button:focus{outline:0}.input-file-container .file-name{width:calc(10rem - 2.5rem)}.input-file-container .image-preview{margin:0 -16px;height:10rem;-o-object-fit:contain;object-fit:contain;width:10rem}.input-file-container .input-icon{font-size:calc(10rem / 4);height:calc(10rem / 4);width:calc(10rem / 4)}.input-file-container .form-link{display:flex;flex-direction:column;width:10rem}.input-file-container .input-link{width:10rem}.input-file-container .form-link-button{display:flex;flex-direction:row}.input-file-container .form-link-button .mat-button{min-width:calc(10rem / 2);width:calc(10rem / 2)}.input-file-container .mat-orphan-label{color:rgba(0,0,0,.54);display:block;font-size:1rem;left:0;margin:0;position:absolute;top:0;-webkit-transform-origin:0;transform-origin:0;transition:.4s cubic-bezier(.25,.8,.25,1),width .4s cubic-bezier(.25,.8,.25,1)}.input-file-container .mat-orphan-label.active{-webkit-transform:scale(.75);transform:scale(.75)}@-webkit-keyframes bounceIn{20%,40%,60%,80%,from,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{opacity:0;-webkit-transform:scale3d(.3,.3,.3);transform:scale3d(.3,.3,.3)}20%{-webkit-transform:scale3d(1.1,1.1,1.1);transform:scale3d(1.1,1.1,1.1)}40%{-webkit-transform:scale3d(.9,.9,.9);transform:scale3d(.9,.9,.9)}60%{opacity:1;-webkit-transform:scale3d(1.03,1.03,1.03);transform:scale3d(1.03,1.03,1.03)}80%{-webkit-transform:scale3d(.97,.97,.97);transform:scale3d(.97,.97,.97)}to{opacity:1;-webkit-transform:scale3d(1,1,1);transform:scale3d(1,1,1)}}@keyframes bounceIn{20%,40%,60%,80%,from,to{-webkit-animation-timing-function:cubic-bezier(.215,.61,.355,1);animation-timing-function:cubic-bezier(.215,.61,.355,1)}0%{opacity:0;-webkit-transform:scale3d(.3,.3,.3);transform:scale3d(.3,.3,.3)}20%{-webkit-transform:scale3d(1.1,1.1,1.1);transform:scale3d(1.1,1.1,1.1)}40%{-webkit-transform:scale3d(.9,.9,.9);transform:scale3d(.9,.9,.9)}60%{opacity:1;-webkit-transform:scale3d(1.03,1.03,1.03);transform:scale3d(1.03,1.03,1.03)}80%{-webkit-transform:scale3d(.97,.97,.97);transform:scale3d(.97,.97,.97)}to{opacity:1;-webkit-transform:scale3d(1,1,1);transform:scale3d(1,1,1)}}.bounce-in{-webkit-animation-duration:.75s;animation-duration:.75s;-webkit-animation-name:bounceIn;animation-name:bounceIn}@-webkit-keyframes slideInUp{from{opacity:0;-webkit-transform:translate3d(0,100%,0);transform:translate3d(0,100%,0)}to{opacity:1;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}}@keyframes slideInUp{from{opacity:0;-webkit-transform:translate3d(0,100%,0);transform:translate3d(0,100%,0)}to{opacity:1;-webkit-transform:translate3d(0,0,0);transform:translate3d(0,0,0)}}.slide-in-up{-webkit-animation-duration:.25s;animation-duration:.25s;-webkit-animation-name:slideInUp;animation-name:slideInUp}"]
                }] }
    ];
    /** @nocollapse */
    InputFileComponent.ctorParameters = function () { return [
        { type: FormBuilder },
        { type: InputFileService }
    ]; };
    InputFileComponent.propDecorators = {
        disabled: [{ type: Input }],
        placeholder: [{ type: Input }],
        classAnimation: [{ type: Input }],
        fileAccept: [{ type: Input }],
        fileLimit: [{ type: Input }],
        iconAdd: [{ type: Input }],
        iconDelete: [{ type: Input }],
        iconFile: [{ type: Input }],
        iconLink: [{ type: Input }],
        linkEnabled: [{ type: Input }],
        placeholderLink: [{ type: Input }],
        sizeLimit: [{ type: Input }],
        acceptedFile: [{ type: Output }],
        deletedFile: [{ type: Output }],
        rejectedFile: [{ type: Output }],
        fileInput: [{ type: ViewChild, args: ['fileInput',] }]
    };
    return InputFileComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var DropZoneDirective = /** @class */ (function () {
    function DropZoneDirective() {
        this.disabled = false;
        this.itemDragOver = new EventEmitter();
        this.itemDragLeave = new EventEmitter();
        this.itemDrop = new EventEmitter();
        // Prevent dragleave on children, could be better but it's cheap for better performance
        this.whiteListClasses = ['file-button', 'mat-button-wrapper', 'input-icon'];
    }
    /**
     * Drag Over event handler.
     * @param event
     */
    /**
     * Drag Over event handler.
     * @param {?} event
     * @return {?}
     */
    DropZoneDirective.prototype.onDragOver = /**
     * Drag Over event handler.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.preventAndStopEventPropagation(event);
        if (!this.isOver && !this.disabled) {
            this.isOver = true;
            this.itemDragOver.emit();
        }
    };
    /**
     * Drag Leave event handler.
     * @param event
     */
    /**
     * Drag Leave event handler.
     * @param {?} event
     * @return {?}
     */
    DropZoneDirective.prototype.onDragLeave = /**
     * Drag Leave event handler.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        this.preventAndStopEventPropagation(event);
        if (this.isOver && this.isTrueLeave(event) && !this.disabled) {
            this.isOver = false;
            this.itemDragLeave.emit();
        }
    };
    /**
     * Drop event handler.
     * @param event
     */
    /**
     * Drop event handler.
     * @param {?} event
     * @return {?}
     */
    DropZoneDirective.prototype.onDrop = /**
     * Drop event handler.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        if (!this.disabled && event instanceof DragEvent) {
            this.preventAndStopEventPropagation(event);
            this.isOver = false;
            try {
                this.itemDrop.emit(event.dataTransfer.files);
            }
            catch (e) {
                console.error(e);
            }
        }
    };
    /**
     * Prevents and stops event propagration.
     * @param event
     */
    /**
     * Prevents and stops event propagration.
     * @param {?} event
     * @return {?}
     */
    DropZoneDirective.prototype.preventAndStopEventPropagation = /**
     * Prevents and stops event propagration.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        event.preventDefault();
        event.stopPropagation();
    };
    /**
     * Checks if the leave is not trigger by a children.
     * @param event
     */
    /**
     * Checks if the leave is not trigger by a children.
     * @param {?} event
     * @return {?}
     */
    DropZoneDirective.prototype.isTrueLeave = /**
     * Checks if the leave is not trigger by a children.
     * @param {?} event
     * @return {?}
     */
    function (event) {
        var e_1, _a;
        try {
            for (var _b = __values(this.whiteListClasses), _c = _b.next(); !_c.done; _c = _b.next()) {
                var c = _c.value;
                if (event.fromElement != null && event.fromElement.className.indexOf(c) >= 0) {
                    return false;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return true;
    };
    DropZoneDirective.decorators = [
        { type: Directive, args: [{
                    selector: '[inputFileDropZone]'
                },] }
    ];
    DropZoneDirective.propDecorators = {
        disabled: [{ type: Input }],
        itemDragOver: [{ type: Output }],
        itemDragLeave: [{ type: Output }],
        itemDrop: [{ type: Output }],
        onDragOver: [{ type: HostListener, args: ['dragover', ['$event'],] }],
        onDragLeave: [{ type: HostListener, args: ['dragleave', ['$event'],] }],
        onDrop: [{ type: HostListener, args: ['drop', ['$event'],] }]
    };
    return DropZoneDirective;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */
var InputFileModule = /** @class */ (function () {
    function InputFileModule() {
    }
    /**
     * @param {?} config
     * @return {?}
     */
    InputFileModule.forRoot = /**
     * @param {?} config
     * @return {?}
     */
    function (config) {
        return {
            ngModule: InputFileModule,
            providers: [
                InputFileService,
                { provide: 'config', useValue: config }
            ]
        };
    };
    InputFileModule.decorators = [
        { type: NgModule, args: [{
                    declarations: [
                        DropZoneDirective,
                        InputFileComponent
                    ],
                    imports: [
                        CommonModule,
                        FormsModule,
                        MatButtonModule,
                        MatFormFieldModule,
                        MatIconModule,
                        MatInputModule,
                        ReactiveFormsModule
                    ],
                    exports: [
                        InputFileComponent
                    ],
                    providers: [
                        InputFileService
                    ],
                    entryComponents: [InputFileComponent]
                },] }
    ];
    return InputFileModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,missingReturn,uselessCode} checked by tsc
 */

export { InputFileComponent, InputFileModule, InputFileService, DropZoneDirective as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,